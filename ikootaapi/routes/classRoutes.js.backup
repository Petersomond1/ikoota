// ikootaapi/routes/classRoutes.js
// COMPLETE REBUILD USING EXACT MEMBERSHIP ROUTES PATTERNS
// Simple middleware setup, consistent route structure, proper error handling

import express from 'express';
import multer from 'multer';
import { authenticate, requireMembership } from '../middleware/auth.js';
import {
  validateClassId,
  validatePagination,
  validateSorting,
  validateDateRange,
  validateRequestSize
} from '../middleware/classValidation.js';
import * as classController from '../controllers/classControllers.js';

// Configure multer for video uploads (up to 5GB)
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 5 * 1024 * 1024 * 1024, // 5GB limit
    fieldSize: 100 * 1024 * 1024      // 100MB for other fields
  },
  fileFilter: (req, file, cb) => {
    // Accept video, audio files, and common document formats
    if (file.mimetype.startsWith('video/') ||
        file.mimetype.startsWith('audio/') ||
        file.mimetype.startsWith('image/') ||
        file.mimetype === 'application/pdf' ||
        file.mimetype === 'application/msword' ||
        file.mimetype === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||
        file.mimetype === 'text/plain') {
      cb(null, true);
    } else {
      cb(new Error('File type not supported'), false);
    }
  }
});

const router = express.Router();

// ===============================================
// GLOBAL MIDDLEWARE (FOLLOWING MEMBERSHIP PATTERN)
// ===============================================

// Apply request size validation to all routes
router.use(validateRequestSize);

// Add route logging middleware
router.use((req, res, next) => {
  console.log(`ðŸ“Š Class Route: ${req.method} ${req.originalUrl}`);
  next();
});

// ===============================================
// PUBLIC CLASS ROUTES
// ===============================================

/**
 * GET /api/classes/test
 * Test endpoint for class system
 */
router.get('/test', classController.testClassRoutes);

/**
 * GET /api/classes
 * Get all public classes (no authentication required)
 * âœ… ENHANCED: Public course catalog for prospective learners
 */
router.get('/', 
  validatePagination, 
  validateSorting, 
  classController.getAllClasses
);

// ===============================================
// AUTHENTICATED CLASS ROUTES  
// ===============================================

/**
 * GET /api/classes/my-classes
 * Get classes for the authenticated user
 */
// UserDashboard.jsx, ClassContentViewer.jsx its navigate
router.get('/my-classes',
  authenticate,
  validatePagination,
  validateSorting,
  classController.getUserClasses
);

/**
 * GET /api/classes/recommendations
 * Get personalized class recommendations
 */
// UserDashboard.jsx
router.get('/recommendations',
  authenticate,
  validatePagination,
  classController.getClassRecommendations
);

/**
 * GET /api/classes/my-progress
 * Get user's progress across all classes
 */
// UserDashboard.jsx
router.get('/my-progress',
  authenticate,
  validateDateRange,
  classController.getUserProgress
);

/**
 * GET /api/classes/my-activity
 * Get user's recent class activity
 */
// UserDashboard.jsx
router.get('/my-activity',
  authenticate,
  validatePagination,
  classController.getUserActivity
);

/**
 * GET /api/classes/:id
 * Get specific class details
 */
// Nil
router.get('/:id',
  authenticate,
  validateClassId,
  classController.getClassById
);

/**
 * POST /api/classes/:id/join
 * Join a specific class
 */
// Nil
router.post('/:id/join',
  authenticate,
  validateClassId,
  classController.joinClass
);

/**
 * POST /api/classes/:id/leave
 * Leave a specific class
 */
// Nil
router.post('/:id/leave',
  authenticate,
  validateClassId,
  classController.leaveClass
);

/**
 * GET /api/classes/:id/members
 * Get members of a specific class
 */
// Nil
router.get('/:id/members',
  authenticate,
  validateClassId,
  validatePagination,
  validateSorting,
  classController.getClassMembers
);

/**
 * GET /api/classes/:id/content
 * Get content for a specific class
 * âœ… ENHANCED: Interactive learning materials and resources
 */
router.get('/:id/content',
  authenticate,
  validateClassId,
  validatePagination,
  classController.getClassContent
);

/**
 * POST /api/classes/:id/content
 * Create content for a specific class (lessons, materials, audio, etc.)
 * âœ… ENHANCED: Content creation for instructors and members
 */
router.post('/:id/content',
  authenticate,
  validateClassId,
  requireMembership(['member']),
  upload.fields([
    { name: 'video', maxCount: 1 },
    { name: 'audio', maxCount: 1 },
    { name: 'attachment', maxCount: 5 }
  ]),
  classController.createClassContent
);

/**
 * GET /api/classes/:id/announcements
 * Get announcements for a specific class
 * âœ… ENHANCED: Real-time class updates and important notifications
 */
router.get('/:id/announcements',
  authenticate,
  validateClassId,
  validatePagination,
  classController.getClassAnnouncements
);

/**
 * POST /api/classes/:id/feedback
 * Submit feedback for a class
 * âœ… ENHANCED: Continuous improvement through student feedback
 */
router.post('/:id/feedback',
  authenticate,
  validateClassId,
  classController.submitClassFeedback
);

/**
 * POST /api/classes/:id/attendance
 * Mark attendance for a class session
 * âœ… ENHANCED: Automated attendance tracking for engagement metrics
 */
router.post('/:id/attendance',
  authenticate,
  validateClassId,
  classController.markAttendance
);

/**
 * GET /api/classes/:id/schedule
 * Get class schedule
 * âœ… ENHANCED: Dynamic scheduling for live sessions and deadlines
 */
router.get('/:id/schedule',
  authenticate,
  validateClassId,
  validateDateRange,
  classController.getClassSchedule
);

/**
 * GET /api/classes/:id/stats
 * Get statistics for a specific class
 */
router.get('/:id/stats',
  authenticate,
  validateClassId,
  classController.getClassStats
);

/**
 * GET /api/classes/:id/progress
 * Get user's progress in specific class
 */
// Nil
router.get('/:id/progress',
  authenticate,
  validateClassId,
  classController.getClassProgress
);

// ===============================================
// CLASSROOM VIDEO/LIVE SESSION ROUTES
// ===============================================

/**
 * GET /api/classes/:id/classroom/session
 * Get classroom session data (video URL, session info, etc.)
 */
router.get('/:id/classroom/session',
  authenticate,
  validateClassId,
  classController.getClassroomSession
);

/**
 * GET /api/classes/:id/classroom/chat
 * Get live chat messages for classroom session
 */
router.get('/:id/classroom/chat',
  authenticate,
  validateClassId,
  classController.getClassroomChat
);

/**
 * POST /api/classes/:id/classroom/chat
 * Send a chat message to classroom session
 */
router.post('/:id/classroom/chat',
  authenticate,
  validateClassId,
  classController.sendClassroomChatMessage
);

/**
 * GET /api/classes/:id/classroom/participants
 * Get current participants in classroom session
 */
router.get('/:id/classroom/participants',
  authenticate,
  validateClassId,
  classController.getClassroomParticipants
);

/**
 * POST /api/classes/:id/classroom/attendance
 * Mark attendance for classroom session
 */
router.post('/:id/classroom/attendance',
  authenticate,
  validateClassId,
  classController.markClassroomAttendance
);

/**
 * POST /api/classes/:id/classroom/sessions
 * Create a new classroom session (for recorded content)
 */
router.post('/:id/classroom/sessions',
  authenticate,
  validateClassId,
  classController.createClassroomSession
);

/**
 * POST /api/classes/:id/classroom/sessions/:sessionId/join
 * Join a specific classroom session (live or recorded)
 */
router.post('/:id/classroom/sessions/:sessionId/join',
  authenticate,
  validateClassId,
  classController.joinClassroomSession
);

// ===============================================
// MENTORSHIP ROUTES (CONVERSE ID INTEGRATION)
// ===============================================

/**
 * GET /api/classes/:id/mentorship-pairs
 * Get mentorship pairs within class with converse ID protection
 */
// ClassMentorshipView.jsx
router.get('/:id/mentorship-pairs',
  authenticate,
  validateClassId,
  classController.getClassMentorshipPairs
);

/**
 * GET /api/classes/:id/my-mentorship-status
 * Get user's mentorship status in specific class
 */
// ClassMentorshipView.jsx
router.get('/:id/my-mentorship-status',
  authenticate,
  validateClassId,
  classController.getUserMentorshipStatus
);

/**
 * POST /api/classes/:id/request-mentor
 * Request a mentor within class context
 */
// ClassMentorshipView.jsx
router.post('/:id/request-mentor',
  authenticate,
  validateClassId,
  classController.requestClassMentor
);

/**
 * POST /api/classes/:id/accept-mentorship
 * Accept mentorship responsibility within class
 */
// ClassMentorshipView.jsx
router.post('/:id/accept-mentorship',
  authenticate,
  validateClassId,
  classController.acceptClassMentorship
);

/**
 * GET /api/classes/:id/members?include_mentorship=true
 * Enhanced members endpoint with mentorship data
 */
// Enhanced version of existing endpoint - no new route needed

// ===============================================
// SEARCH ROUTES
// ===============================================

/**
 * GET /api/classes/search
 * Search classes with filters
 */
// Nil
router.get('/search',
  validatePagination,
  validateSorting,
  (req, res, next) => {
    // Optional authentication - if token provided, use it
    const token = req.headers.authorization;
    if (token) {
      authenticate(req, res, next);
    } else {
      next();
    }
  },
  classController.getAllClasses
);

/**
 * GET /api/classes/by-type/:type
 * Get classes by type
 */
// Nil
router.get('/by-type/:type',
  validatePagination,
  validateSorting,
  (req, res, next) => {
    const { type } = req.params;
    const allowedTypes = ['demographic', 'subject', 'public', 'special'];
    
    if (!allowedTypes.includes(type)) {
      return res.status(400).json({
        success: false,
        error: 'Invalid class type',
        provided: type,
        allowed: allowedTypes,
        timestamp: new Date().toISOString()
      });
    }
    
    req.query.class_type = type;
    next();
  },
  classController.getAllClasses
);

// ===============================================
// VIDEO MANAGEMENT ROUTES (MEMBER LEVEL REQUIRED)
// ===============================================

/**
 * POST /api/classes/:id/videos
 * Upload teaching video for class (requires member level)
 */
router.post('/:id/videos',
  authenticate,
  validateClassId,
  requireMembership(['member']),
  upload.single('video'),
  classController.uploadClassVideo
);

/**
 * GET /api/classes/:id/videos
 * Get all videos for class
 */
router.get('/:id/videos',
  authenticate,
  validateClassId,
  classController.getClassVideos
);

/**
 * DELETE /api/classes/:id/videos/:videoId
 * Delete class video (requires member level and ownership)
 */
router.delete('/:id/videos/:videoId',
  authenticate,
  validateClassId,
  requireMembership(['member']),
  classController.deleteClassVideo
);

// ===============================================
// LIVE CLASS SCHEDULING ROUTES (MEMBER LEVEL REQUIRED)
// ===============================================

/**
 * POST /api/classes/live/schedule
 * Schedule a new live class session (requires member level)
 * Industry standard workflow: Schedule â†’ Admin Approval â†’ Notify Audience â†’ Go Live
 */
router.post('/live/schedule',
  authenticate,
  requireMembership(['member']),
  classController.scheduleLiveClass
);

/**
 * GET /api/classes/live/my-sessions
 * Get user's scheduled live classes
 */
router.get('/live/my-sessions',
  authenticate,
  validatePagination,
  classController.getUserLiveClasses
);

/**
 * POST /api/classes/live/start/:sessionId
 * Start a live class session (instructor or admin only)
 */
router.post('/live/start/:sessionId',
  authenticate,
  classController.startLiveClassSession
);

// ===============================================
// LIVE CLASS ADMIN ROUTES (ADMIN ONLY)
// ===============================================

/**
 * GET /api/classes/live/admin/dashboard
 * Get admin dashboard for live class management
 */
router.get('/live/admin/dashboard',
  authenticate,
  classController.getLiveClassAdminDashboard
);

/**
 * GET /api/classes/live/admin/pending
 * Get pending live class approvals for admin review
 */
router.get('/live/admin/pending',
  authenticate,
  validatePagination,
  classController.getPendingLiveClassApprovals
);

/**
 * PUT /api/classes/live/admin/review/:scheduleId
 * Approve, reject, or modify a live class schedule
 */
router.put('/live/admin/review/:scheduleId',
  authenticate,
  classController.reviewLiveClassSchedule
);

/**
 * POST /api/classes/live/admin/notify/:scheduleId
 * Manually trigger notifications for approved live class
 */
router.post('/live/admin/notify/:scheduleId',
  authenticate,
  classController.triggerLiveClassNotifications
);

/**
 * POST /api/classes/live/admin/control/:sessionId
 * Admin control live session (start/stop/pause)
 */
router.post('/live/admin/control/:sessionId',
  authenticate,
  classController.adminControlLiveSession
);

// ===============================================
// VIDEO SESSION ROUTES
// ===============================================

/**
 * POST /api/classes/:id/video-sessions
 * Create a new video session for the class
 */
router.post('/:id/video-sessions',
  authenticate,
  validateClassId,
  requireMembership(['member']),
  classController.createVideoSessionController
);

/**
 * GET /api/classes/:id/video-sessions
 * Get all video sessions for a class
 */
router.get('/:id/video-sessions',
  authenticate,
  validateClassId,
  classController.getClassVideoSessions
);

/**
 * GET /api/classes/video-sessions/:sessionId
 * Get specific video session details
 */
router.get('/video-sessions/:sessionId',
  authenticate,
  classController.getVideoSessionController
);

/**
 * POST /api/classes/video-sessions/:sessionId/join
 * Join a video session
 */
router.post('/video-sessions/:sessionId/join',
  authenticate,
  classController.joinVideoSession
);

/**
 * POST /api/classes/video-sessions/:sessionId/leave
 * Leave a video session
 */
router.post('/video-sessions/:sessionId/leave',
  authenticate,
  classController.leaveVideoSession
);

/**
 * GET /api/classes/video-sessions/:sessionId/participants
 * Get participants of a video session
 */
router.get('/video-sessions/:sessionId/participants',
  authenticate,
  classController.getSessionParticipants
);

/**
 * POST /api/classes/video-sessions/:sessionId/chat
 * Send a chat message in video session
 */
router.post('/video-sessions/:sessionId/chat',
  authenticate,
  classController.sendSessionChatMessage
);

/**
 * GET /api/classes/video-sessions/:sessionId/chat
 * Get chat messages from video session
 */
router.get('/video-sessions/:sessionId/chat',
  authenticate,
  classController.getSessionChatMessages
);

/**
 * POST /api/classes/video-sessions/:sessionId/attendance
 * Mark attendance for video session
 */
router.post('/video-sessions/:sessionId/attendance',
  authenticate,
  classController.markVideoSessionAttendanceController
);

// ===============================================
// ERROR HANDLING MIDDLEWARE
// ===============================================

/**
 * Handle class-specific errors
 */
router.use((error, req, res, next) => {
  console.error('ðŸš¨ Class Route Error:', error.message);
  
  // Handle specific error types
  if (error.message.includes('not found')) {
    return res.status(404).json({
      success: false,
      error: 'Resource not found',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
  
  if (error.message.includes('already')) {
    return res.status(409).json({
      success: false,
      error: 'Conflict',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
  
  if (error.message.includes('full')) {
    return res.status(409).json({
      success: false,
      error: 'Class is full',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
  
  if (error.message.includes('access') || error.message.includes('permission')) {
    return res.status(403).json({
      success: false,
      error: 'Access denied',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
  
  // Generic error response
  res.status(500).json({
    success: false,
    error: 'Internal server error',
    message: error.message,
    timestamp: new Date().toISOString()
  });
});

// ===============================================
// 404 HANDLER
// ===============================================

router.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Class endpoint not found',
    path: req.originalUrl,
    method: req.method,
    available_endpoints: {
      public: [
        'GET /api/classes - Get all public classes',
        'GET /api/classes/test - Test endpoint',
        'GET /api/classes/search - Search classes',
        'GET /api/classes/by-type/:type - Get classes by type'
      ],
      authenticated: [
        'GET /api/classes/my-classes - Get user classes',
        'GET /api/classes/recommendations - Get recommendations',
        'GET /api/classes/my-progress - Get user progress',
        'GET /api/classes/my-activity - Get user activity',
        'GET /api/classes/:id - Get specific class',
        'POST /api/classes/:id/join - Join class',
        'POST /api/classes/:id/leave - Leave class',
        'GET /api/classes/:id/members - Get class members',
        'GET /api/classes/:id/content - Get class content',
        'POST /api/classes/:id/content - Create class content',
        'GET /api/classes/:id/announcements - Get announcements',
        'POST /api/classes/:id/feedback - Submit feedback',
        'POST /api/classes/:id/attendance - Mark attendance',
        'GET /api/classes/:id/schedule - Get class schedule',
        'GET /api/classes/:id/progress - Get class progress'
      ]
    },
    timestamp: new Date().toISOString()
  });
});

export default router;



